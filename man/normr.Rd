% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods.R
\docType{package}
\name{normr}
\alias{DifferentialPeakCalling,}
\alias{EnrichmentCalling}
\alias{PeakCalling,}
\alias{diffR,character,character,GenomicRanges-method}
\alias{diffR,character,character,character-method}
\alias{diffR,character,character,data.frame-method}
\alias{diffR,integer,integer,GenomicRanges-method}
\alias{enrichR}
\alias{normR,}
\alias{normr}
\alias{normr-package}
\alias{regimeR}
\alias{regimeR,character,character,GenomicRanges,numeric-method}
\alias{regimeR,character,character,character,numeric-method}
\alias{regimeR,character,character,data.frame,numeric-method}
\alias{regimeR,integer,integer,GenomicRanges,numeric-method}
\title{Enrichment, Difference and Regime Calling in ChIP-seq data.}
\usage{
enrichR(treatment, control, genome, ...)

\S4method{diffR}{integer,integer,GenomicRanges}(treatment, control, genome,
  eps = 1e-05, iterations = 10, procs = 1L, verbose = TRUE)

\S4method{diffR}{character,character,GenomicRanges}(treatment, control, genome,
  countConfig = countConfigSingleEnd(), eps = 1e-05, iterations = 10,
  procs = 1L, verbose = TRUE)

\S4method{diffR}{character,character,data.frame}(treatment, control, genome,
  countConfig = countConfigSingleEnd(), eps = 1e-05, iterations = 10,
  procs = 1L, verbose = TRUE)

\S4method{diffR}{character,character,character}(treatment, control,
  genome = "", countConfig = countConfigSingleEnd(), eps = 1e-05,
  iterations = 10, procs = 1L, verbose = TRUE)

regimeR(treatment, control, genome, models, ...)

\S4method{regimeR}{integer,integer,GenomicRanges,numeric}(treatment, control,
  genome, models = 3, eps = 1e-05, iterations = 10, procs = 1L,
  verbose = TRUE)

\S4method{regimeR}{character,character,GenomicRanges,numeric}(treatment,
  control, genome, models = 3, countConfig = countConfigSingleEnd(),
  eps = 1e-05, iterations = 10, procs = 1L, verbose = TRUE)

\S4method{regimeR}{character,character,data.frame,numeric}(treatment, control,
  genome, models = 3, countConfig = countConfigSingleEnd(), eps = 1e-05,
  iterations = 10, procs = 1L, verbose = TRUE)

\S4method{regimeR}{character,character,character,numeric}(treatment, control,
  genome = "", models = 3, countConfig = countConfigSingleEnd(),
  eps = 1e-05, iterations = 10, procs = 1L, verbose = TRUE)
}
\arguments{
\item{treatment}{A \link{integer} vector of treatment counts or a
\link{character} pointing to the treatment bam file. In the latter case an
\code{treatment}.bai index file should exist in the same folder. Should be
consistent with control.}

\item{control}{A \link{integer} vector of control counts or a
\link{character} pointing to the control bam file. In the latter case an
\code{control}.bai index file should exist in the same folder. Should be
consistent with treatment.}

\item{genome}{Either \code{NULL}, an USCS genome identifier for
\code{GenomeInfoDb::fetchExtendedChromInfoFromUCSC} (only assembled
molecules, circular omitted) or a \link{data.frame} consisting of two
columns(1st column=chromosome names, 2nd column=lengths). Chromosome names
given should be present in the bam file header. If \code{NULL}, chromosome
names will be read from treatment bamheader. Please be aware that bamheader
might contain irregular contigs and chrM which influence the diffR fit.
(DEFAUlT=NULL).}

\item{eps}{Threshold for EM convergence.}

\item{procs}{Number of threads to use}

\item{verbose}{A logical value indicating whether verbose output is desired}

\item{countConfig}{A \code{\link{NormRCountConfig}} object specifying bam counting parameters
for read count retrieval.}

\item{models}{Number of model components for \code{regimeR()}. Should be an
\code{integer() >= 3}. (DEFAULT=3)}
}
\value{
a \link{NormRFit} object
}
\description{
Robust normalization and difference calling procedures for ChIP-seq and
alike data. Count vectors can be obtained from experiment bam files in two
experiments. Counts are jointly modeled as a multinomial sampling trial.
A binomial mixture model with a given number of components is fit and used
for identifying enriched or depleted regions in two given data tracks.
Log-space multinomial model is fit by Expectation maximization in C++.

\code{enrichR}: Enrichment calling between \code{treatment} (ChIP-seq) and
\code{control} (Input) for either two given read count vectors and an
optional \link{GenomicRanges} object that defines the original regions
('integer,integer,GenomicRangesOrNULL'), two given bam filepaths and a
genome \code{data.frame} defining chromosomes which will be binned according
to 'countConfig' ('character,character,data.frame') or two given bam
filepaths and a genome \code{character} specifying a UCSC genome identifier
(e.g. "hg19") that is used for retrieval of chromosome annotation which will
be binned according to 'countConfig' ('character,character,character').

\code{regimeR}: Enrichment regime calling between \code{treatment}
(ChIP-seq 1) and \code{control} (ChIP-seq 2) with with \code{models} number
of models for either two given read count vectors and an optional
\link{GenomicRanges} object that defines the original regions
('integer,integer,GenomicRangesOrNULL'), two given bam filepaths and a
genome \code{data.frame} defining chromosomes which will be binned according
to 'countConfig' ('character,character,data.frame') or two given bam
filepaths and a genome \code{character} specifying a UCSC genome identifier
(e.g. "hg19") that is used for retrieval of chromosome annotation which will
be binned according to 'countConfig' ('character,character,character').
}
\details{
A correct background estimation is crucial for calling enrichment in ChIP-seq
data.  These functions implement the mixture modeling for two given ChIP-seq
tracks by joint multinomial modeling. A predefined number of model components
is fit simultaneously to binned read count data via an efficient Expectation
Maximization implementation in C++. Convergence is achieved by a threshold on
the minimum change in model loglikelihood. After the model is fit, every bin
is tested for significance against the fitted background component. Moreover,
a standardized enrichment for each bin is calculated based on the fitted
background component.
}
\examples{
require(GenomicRanges)

### enrichR(): Calling Enrichment over Input
#load some example bamfiles
input <- system.file("extdata", "K562_Input.bam", package="normr")
chipK4 <- system.file("extdata", "K562_H3K4me3.bam", package="normr")
#region to count in (example files contain information only in this region)
gr <- GRanges("chr1", IRanges(22500000, 25000000))
#configure your counting strategy (see BamCountConfig-class)
countConfiguration <- countConfigSingleEnd(binsize = 1000,
                                           mapq = 30, shift = 100)
#invoke enrichR to call enrichment
enrich <- enrichR(treatment = chipK4, control = inputfile,
                  genome = gr,  countConfig = countConfiguration,
                  iterations = 10, procs = 1, verbose = T)
#inspect the fit
enrich
summary(enrich)

## Not run:
#write significant regions to bed
exportR(enrich, filename = "enrich.bed", fdr = 0.01)
#write normalized enrichment to bigWig
exportR(enrich, filename = "enrich.bw")
## End(**Not run**)

### diffR(): Calling differences between two conditions
chipK36 <- system.file("extdata", "K562_H3K36me3.bam", package="normr")
diff <- diffR(treatment = chipK36, control = chipK4,
              genome = gr,  countConfig = countConfiguration,
              iterations = 10, procs = 1, verbose = T)
summary(diff)

### regimeR(): Identification of broad and peak enrichment
regime <- regimeR(treatment = chipK36, control = chipK4, models = 3
                  genome = gr,  countConfig = countConfiguration,
                  iterations = 10, procs = 1, verbose = T)
summary(regime)
}
\author{
Johannes Helmuth \email{helmuth@molgen.mpg.de}
}
\seealso{
\code{\link{NormRFit-class}} and \code{\link{NormRCountConfig}} for available functions
}

