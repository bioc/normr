// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// logical2Int
Rcpp::IntegerVector logical2Int(const Rcpp::LogicalVector& idx);
RcppExport SEXP diffr_logical2Int(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector& >::type idx(idxSEXP);
    __result = Rcpp::wrap(logical2Int(idx));
    return __result;
END_RCPP
}
// logical2Count
int logical2Count(const Rcpp::LogicalVector& vec, int nthreads);
RcppExport SEXP diffr_logical2Count(SEXP vecSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(logical2Count(vec, nthreads));
    return __result;
END_RCPP
}
// logRowSum
Rcpp::NumericVector logRowSum(const Rcpp::NumericMatrix& mat, int nthreads);
RcppExport SEXP diffr_logRowSum(SEXP matSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(logRowSum(mat, nthreads));
    return __result;
END_RCPP
}
// logSumVector
double logSumVector(const Rcpp::NumericVector& vec, int nthreads);
RcppExport SEXP diffr_logSumVector(SEXP vecSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(logSumVector(vec, nthreads));
    return __result;
END_RCPP
}
// mapToUniquePairs
Rcpp::List mapToUniquePairs(const Rcpp::IntegerVector& r, const Rcpp::IntegerVector& s);
RcppExport SEXP diffr_mapToUniquePairs(SEXP rSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type s(sSEXP);
    __result = Rcpp::wrap(mapToUniquePairs(r, s));
    return __result;
END_RCPP
}
// mapToOriginal
Rcpp::NumericVector mapToOriginal(const Rcpp::NumericVector& vec, const Rcpp::IntegerVector& map);
RcppExport SEXP diffr_mapToOriginal(SEXP vecSEXP, SEXP mapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type map(mapSEXP);
    __result = Rcpp::wrap(mapToOriginal(vec, map));
    return __result;
END_RCPP
}
// diffr_core
Rcpp::List diffr_core(const Rcpp::IntegerVector& r, const Rcpp::IntegerVector& s, const int models, const double eps, const bool verbose, const int nthreads);
RcppExport SEXP diffr_diffr_core(SEXP rSEXP, SEXP sSEXP, SEXP modelsSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int >::type models(modelsSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const int >::type nthreads(nthreadsSEXP);
    __result = Rcpp::wrap(diffr_core(r, s, models, eps, verbose, nthreads));
    return __result;
END_RCPP
}
